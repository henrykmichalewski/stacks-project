	stacks-project -- algebraic stacks project


Collaborative web-based project writing a text book on algebraic stacks and the
algebraic geometry that is needed to define them. Location on the web:

	https://stacks.math.columbia.edu/

You can simply latex the files in the current directory read them, edit them,
and submit your changes by email back into the project.


Here is are some pointers to documentation:
  * how to create all dvi/pdf files at once, see documentation/make-project
  * how to submit your work, see documentation/submitting-patches
  * how to use git, see documentation/git-howto
  * read about support from organizations in documentation/support
  * for a rough todo list, see documentation/todo-list
  * for technical rules governing internal references, see documentation/rules
For more information, please see the website at the address above.


To get in touch with the maintainer(s) of this project please email

	stacks.project@gmail.com

## Dependency Graph

A Python script in `scripts/dependency_graph.py` can generate a graph of references between labelled environments. It writes a Graphviz DOT file and optional JSON description. With `--tex` it outputs a TeX document containing a theorem and all dependencies.

Examples:

```bash
python3 scripts/dependency_graph.py . --dot deps.dot --json
python3 scripts/dependency_graph.py . --tex lemma-silly --tex-out deps.tex
python3 scripts/dependency_graph.py . --tex lemma-silly \
  --lean-path ../mathlib4 --tex-out deps.tex
python3 scripts/dependency_graph.py . \
  --tex lemma-equality-genus-reduction-bigger-than \
  --lean-path ../mathlib4-master --tex-out genus.tex
python3 scripts/dependency_graph.py . \
  --tex lemma-weil-additive \
  --lean-path ../mathlib4-master --tex-out weil.tex
python3 scripts/dependency_graph.py . \
  --tex lemma-topological-invariance \
  --lean-path ../mathlib4-master --tex-out invariance.tex
```

The optional `--lean-path` argument points to a mathlib4 checkout. When
provided, Lean snippets for Stacks tags referenced in mathlib are inserted
after each environment in the generated TeX.  Passing the `--interleave`
flag places the Lean code next to the corresponding LaTeX statement for
lemmas and definitions.

Running the second command produces a TeX document with the theorem
and its referenced environments.  For example the current output for
`lemma-silly` is

```tex
\documentclass{article}
\begin{document}
\begin{lemma}
\label{lemma-silly}
Let $X$ be a spectral space. Let
$$
\xymatrix{
Y \ar[r] \ar[d] & T \ar[d] \\
X \ar[r] & \pi_0(X)
}
$$
be a cartesian diagram in the category of topological spaces
with $T$ profinite. Then $Y$ is spectral and $T = \pi_0(Y)$.
If moreover $X$ is w-local, then $Y$ is w-local, $Y \to X$ is w-local,
and the set of closed points of $Y$ is the inverse image of the
set of closed points of $X$.
\end{lemma}
\begin{situation}
\label{situation-setup}
Here $S$ is a scheme and $B$ is an algebraic space over $S$.
We assume $B$ is quasi-separated, locally Noetherian, and
universally catenary (Decent Spaces, Definition
\ref{decent-spaces-definition-universally-catenary}).
Moreover, we assume given a dimension function
$\delta : |B| \longrightarrow \mathbf{Z}$.
We say $X/B$ is {\it good} if $X$ is an algebraic space
over $B$ whose structure morphism $f : X \to B$ is
quasi-separated and locally of finite type.
In this case we define
$$
\delta = \delta_{X/B} : |X| \longrightarrow \mathbf{Z}
$$
as the map sending $x$ to $\delta(f(x))$ plus the transcendence degree
of $x/f(x)$ (Morphisms of Spaces, Definition
\ref{spaces-morphisms-definition-dimension-fibre}).
This is a dimension function by
More on Morphisms of Spaces, Lemma
\ref{spaces-more-morphisms-lemma-universally-catenary-dimension-function}.
\end{situation}
\end{document}
```

With `--interleave` enabled and a Lean snippet available the environment is
rendered side by side with the Lean code.  For the sample lemma above the
output looks like

```tex
\documentclass{article}
\begin{document}
\noindent\begin{minipage}[t]{0.48\linewidth}
\begin{lemma}\label{lemma-a}
For any $n \ge 0$ we have
\[
  \sum_{i=0}^n i = \frac{n(n+1)}{2}.
\]
\end{lemma}
\end{minipage}\hfill\begin{minipage}[t]{0.48\linewidth}
\begin{verbatim}
lemma lemma_a (n : Nat) :
  (Finset.range (n + 1)).sum id = n * (n + 1) / 2 := by
  simpa using Nat.sum_range_id n
\end{verbatim}
\end{minipage}
\end{document}
```

The script `scripts/compute_stats.py` can compute basic statistics for the dependency graph.
It recognises Stacks references in mathlib via the standard URL as well as `@[stacks TAG]` attributes and "Stacks Tag TAG" docstrings.
For example:
```bash
python3 scripts/compute_stats.py . --lean-path ../mathlib4 --json
```
prints a JSON summary of the number of environments, edges and Lean snippets.
The field `num_nodes_with_lean_snippet` counts how many Stacks environments
actually include a snippet of Lean code.

Example output for a small test repository:
```bash
$ python3 scripts/compute_stats.py . --lean-path ../mathlib4 --json
{
  "num_nodes": 2,
  "num_edges": 0,
  "num_lean_snippets": 1,
  "num_nodes_with_lean_snippet": 1
}
```

## interleaved_dep_graph.py

The new script `scripts/interleaved_dep_graph.py` is a standâ€‘alone tool that
builds dependency graphs with the Stacks statements interleaved with Lean
snippets.  It only requires `networkx` and `rich` and can therefore be run
independently of the rest of the Stacks build system.  A typical call is

```bash
python3 interleaved_dep_graph.py /path/to/stacks-project \
    --tex lemma-weil-additive \
    --lean /path/to/mathlib4 \
    --tex-out weil.tex --interleave
```

The output is a TeX document containing the selected statement together with all
referenced environments and, when available, the corresponding Lean code shown
side by side.  `--dot` and `--json` options produce Graphviz and JSON versions
of the same dependency graph.
